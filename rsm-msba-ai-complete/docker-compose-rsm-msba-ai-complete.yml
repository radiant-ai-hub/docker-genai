services:
  # RSM MSBA container
  rsm-msba:
    image: vnijs/rsm-msba-genai-intel:latest
    container_name: rsm-msba-genai-intel
    environment:
      TZ: America/Los_Angeles
      USER: jovyan
      HOME: /home/jovyan
      SHELL: /bin/zsh
      ZDOTDIR: /home/jovyan/.rsm-msba/zsh
      RSMBASE: /home/jovyan/.rsm-msba
      # Add Ollama environment variable for internal access
      OLLAMA_HOST: ollama:11434
    volumes:
      - ${HOME}:/home/jovyan
      - pg_data:/var/lib/postgresql/16/main
    networks:
      - rsm-genai
    ports:
      - 127.0.0.1:8765:8765

  # Traefik proxy
  traefik:
    image: "traefik"
    restart: always
    command:
      - "--api=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.mytlschallenge.acme.tlschallenge=true"
      - "--certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL:-example@example.com}"
      - "--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - traefik_data:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - rsm-genai

  # PostgreSQL database (shared between n8n and potentially other services)
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    networks: ['rsm-genai']
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-n8n}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-n8n}
      - POSTGRES_DB=${POSTGRES_DB:-n8n}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER:-n8n} -d ${POSTGRES_DB:-n8n}']
      interval: 5s
      timeout: 5s
      retries: 10

  # n8n workflow automation
  n8n:
    build: ./n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN:-n8n}.${DOMAIN_NAME:-localhost}`)
      - traefik.http.routers.n8n.tls=true
      - traefik.http.routers.n8n.entrypoints=web,websecure
      - traefik.http.routers.n8n.tls.certresolver=mytlschallenge
      - traefik.http.middlewares.n8n.headers.SSLRedirect=true
      - traefik.http.middlewares.n8n.headers.STSSeconds=315360000
      - traefik.http.middlewares.n8n.headers.browserXSSFilter=true
      - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
      - traefik.http.middlewares.n8n.headers.forceSTSHeader=true
      - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME:-localhost}
      - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.n8n.headers.STSPreload=true
      - traefik.http.routers.n8n.middlewares=n8n@docker
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-n8n}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-n8n}
      - N8N_HOST=${SUBDOMAIN:-n8n}.${DOMAIN_NAME:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-https}
      - NODE_ENV=production
      - WEBHOOK_URL=${WEBHOOK_URL:-https://n8n.localhost/}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-YourEncryptionKey}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET:-YourJWTSecret}
      - GENERIC_TIMEZONE=America/Los_Angeles
      - TZ=America/Los_Angeles
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true
      - OLLAMA_HOST=ollama:11434
      # Add your API keys here as needed
      - MCP_BRAVE_API_KEY=${MCP_BRAVE_API_KEY:-}
      - MCP_OPENAI_API_KEY=${MCP_OPENAI_API_KEY:-}
    networks:
      - rsm-genai
    depends_on:
      postgres:
        condition: service_healthy

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    networks: ['rsm-genai']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  # Ollama for local AI models - CPU version by default
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    networks: ['rsm-genai']
    restart: unless-stopped
    ports:
      - 11434:11434
    volumes:
      - ollama_storage:/root/.ollama

  # Initial model pull for Ollama
  ollama-init:
    image: ollama/ollama:latest
    container_name: ollama-init
    networks: ['rsm-genai']
    volumes:
      - ollama_storage:/root/.ollama
    entrypoint: /bin/sh
    environment:
      - OLLAMA_HOST=ollama:11434
    command:
      - "-c"
      - "sleep 10 && ollama pull llama3"
    depends_on:
      - ollama

networks:
  rsm-genai:
    name: rsm-genai

volumes:
  pg_data:
    name: pg_data
  postgres_storage:
    name: postgres_storage
  n8n_storage:
    name: n8n_storage
  ollama_storage:
    name: ollama_storage
  qdrant_storage:
    name: qdrant_storage
  traefik_data:
    name: traefik_data